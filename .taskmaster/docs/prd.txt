# NCBI GenBank CDS Retrieval Tool - Product Requirements Document

## Executive Summary
A Python-based tool to automate the retrieval of Coding DNA Sequences (CDS) from NCBI GenBank for mRNA therapeutic development workflows. The tool addresses critical inefficiencies in current manual processes by automating gene name resolution, sequence retrieval, and canonical transcript selection while maintaining full transparency and audit trails.

## Problem Statement
Researchers in mRNA therapeutic development waste 50-100 hours annually on manual sequence retrieval tasks. The current workflow involves individually searching for 20+ genes in NCBI GenBank, manually selecting appropriate transcripts, and copy-pasting sequences into spreadsheets. This process is time-consuming (2-15 minutes per gene), error-prone, and lacks standardization, leading to reproducibility issues and potential therapeutic development delays.

## Solution Overview
An intelligent automation tool that accepts gene lists in various formats, resolves gene names to official symbols, retrieves CDS sequences from authoritative databases, applies consistent selection criteria for canonical transcripts, and provides comprehensive audit trails. The tool emphasizes transparency, speed, and practical usability over theoretical completeness.

## Functional Requirements

### Core Functionality

#### Gene Name Resolution
- Accept input in multiple formats (CSV, Excel, plain text)
- Handle informal nomenclature (e.g., "VEGF" â†’ "VEGFA")
- Resolve aliases and synonyms using NCBI Gene database
- Support mixed case, extra spaces, and common typos
- Disambiguate similar gene names with context awareness
- Batch process entire gene lists simultaneously

#### Sequence Retrieval
- Primary source: NCBI RefSeq database
- Retrieve complete CDS sequences with metadata
- Capture accession numbers, version info, and descriptions
- Generate direct GenBank URLs for each sequence
- Handle network errors gracefully with retry logic
- Cache retrieved sequences for performance

#### Canonical Transcript Selection
- Implement hierarchical selection algorithm:
  1. RefSeq Select designation (highest priority)
  2. UniProt canonical annotation
  3. Longest CDS heuristic
  4. Most recent version as tiebreaker
- Document selection rationale for each gene
- Allow user override of selection criteria
- Flag ambiguous cases for manual review

#### Data Validation
- Cross-reference sequences against UniProt
- Validate against Ensembl as secondary source
- Check for sequence completeness (start/stop codons)
- Identify deprecated or withdrawn entries
- Calculate confidence scores based on source agreement
- Flag potential issues (partial sequences, multiple variants)

### Output Requirements

#### Excel-Compatible Format
- Tab-delimited output for easy Excel import
- Structured columns: Input Name | Official Symbol | Gene ID | RefSeq Accession | GenBank URL | CDS Length | CDS Sequence | Selection Method | Confidence Score | Warnings
- UTF-8 encoding with BOM for Excel compatibility
- Maximum compatibility with copy-paste workflows

#### Audit Trail
- Timestamp for each retrieval
- Database version information
- Selection decision justification
- Source database for each field
- Warning flags for data quality issues
- Complete error log for failed retrievals

### User Interface

#### Command Line Interface
- Simple command: `genbank-tool genes.txt output.tsv`
- Progress bar for batch operations
- Verbose mode for debugging
- Quiet mode for automation
- Help documentation with examples

#### Configuration Options
- Database preference ordering
- Canonical selection strategy
- Retry attempts for network errors
- Cache expiration settings
- Output format preferences

## Non-Functional Requirements

### Performance
- Process 100 genes in under 5 minutes
- Sub-second response for cached sequences
- Parallel retrieval for batch operations
- Minimal memory footprint (<500MB)

### Reliability
- 99%+ success rate for common genes
- Graceful handling of network interruptions
- Automatic retry with exponential backoff
- Comprehensive error reporting
- No data loss on partial failures

### Security
- No storage of sensitive data
- HTTPS for all API communications
- Local caching with appropriate permissions
- No external dependencies requiring authentication

### Usability
- Single-file executable distribution
- No installation requirements beyond Python
- Clear error messages for common issues
- Example files and tutorials included
- Compatible with Windows, Mac, Linux

## Technical Specifications

### Technology Stack
- Language: Python 3.8+
- HTTP library: requests with connection pooling
- Data parsing: Built-in XML/JSON parsers
- CLI framework: Click or argparse
- Testing: pytest with mock services
- Distribution: PyInstaller for executables

### External APIs
- NCBI E-utilities (primary)
- UniProt REST API (validation)
- Ensembl REST API (fallback)
- Rate limiting compliance for all services

### Data Model
- Gene entity with name resolution history
- Transcript entity with selection metadata
- Sequence entity with validation status
- Cache entity with expiration tracking

## Design Principles

### Transparent, Not Magic
Every decision made by the tool must be visible and understandable to researchers. No black box algorithms.

### Fast, Not Perfect
Optimize for 95% accuracy in 10 seconds rather than 99% accuracy in 60 minutes. Researchers can handle edge cases manually.

### Practical, Not Academic
Built for real laboratory workflows. Features driven by actual use cases, not theoretical completeness.

### Excel-Friendly
Researchers live in Excel. All output must paste perfectly into spreadsheets without formatting issues.

## Success Metrics
- 90% reduction in time spent on sequence retrieval
- <1% error rate in sequence accuracy
- 100% reproducibility of transcript selection
- Adoption by 80% of target research teams within 6 months

## Future Enhancements
- GUI version for non-technical users
- Integration with laboratory information systems
- Protein sequence retrieval capabilities
- Custom database support for proprietary sequences
- Batch validation of existing sequence libraries