{
  "master": {
    "tasks": [
      {
        "id": 16,
        "title": "Setup Project Structure and Dependencies",
        "description": "Initialize Python project with proper structure, dependencies, and development environment for NCBI GenBank CDS retrieval tool",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "Project setup is complete. Created directory structure with src/, tests/, docs/ folders. Configured pyproject.toml with Python 3.8+ requirement and all core dependencies: requests (with connection pooling), click for CLI, pytest for testing, and PyInstaller for distribution. Setup virtual environment with development tools (black, flake8, mypy) installed. Initialized git repository with Python .gitignore. All dependencies installed successfully and basic tests are passing. Project is ready for development of core functionality.",
        "testStrategy": "Project structure verified and exists. Dependencies install correctly and basic import statements work. Virtual environment activation and package management commands tested successfully. Basic test suite passes.",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Implement Gene Name Resolution Module",
        "description": "Build gene name resolution system that handles aliases, synonyms, and informal nomenclature using NCBI Gene database",
        "status": "done",
        "dependencies": [
          16
        ],
        "priority": "high",
        "details": "Gene name resolution module has been successfully implemented with GeneResolver class featuring NCBI Gene API integration, intelligent name normalization, confidence scoring, caching mechanism, batch processing with rate limiting, and comprehensive error handling. Module includes 11 passing unit tests with 88% code coverage and basic CLI for testing. Successfully resolves gene aliases (e.g., VEGF→VEGFA) and handles edge cases appropriately.",
        "testStrategy": "Comprehensive test suite implemented with 11 passing unit tests achieving 88% code coverage. Tests include mock NCBI responses for known gene aliases (VEGF→VEGFA), edge cases (invalid genes, ambiguous names, network failures), batch processing performance validation, and rate limiting compliance verification.",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Build NCBI RefSeq Sequence Retrieval System",
        "description": "Implement core sequence retrieval functionality from NCBI RefSeq database with metadata capture",
        "status": "done",
        "dependencies": [
          17
        ],
        "priority": "high",
        "details": "COMPLETED: SequenceRetriever class has been fully implemented with BioPython integration for NCBI E-utilities (efetch, esearch). XML/GenBank parsing for CDS extraction is working. Metadata capture includes accession numbers, version info, descriptions, and GenBank URLs. Exponential backoff retry logic implemented for network resilience. Local caching system with 7-day expiration is operational. RefSeq Select detection capability added. Successfully integrated with gene resolver in main CLI for complete gene-to-sequence workflow. System achieved 86% test coverage with 12 passing unit tests.",
        "testStrategy": "COMPLETED: All core tests implemented and passing. Sequence retrieval tested with known RefSeq accessions. Network failure scenarios mocked and retry logic verified. Metadata extraction accuracy validated. RefSeq Select detection tested. Test coverage at 86% with comprehensive unit test suite.",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Implement Canonical Transcript Selection Algorithm",
        "description": "Build hierarchical selection system for choosing canonical transcripts based on RefSeq Select, UniProt, and length heuristics",
        "details": "Create TranscriptSelector class implementing the hierarchical algorithm: 1) RefSeq Select designation (highest priority), 2) UniProt canonical annotation, 3) Longest CDS heuristic, 4) Most recent version tiebreaker. Integrate with UniProt REST API for canonical transcript validation. Document selection rationale for each gene. Add confidence scoring based on selection method. Flag ambiguous cases requiring manual review. Allow user override of selection criteria through configuration.",
        "testStrategy": "Test selection algorithm with genes having multiple transcript variants. Verify RefSeq Select takes priority over length. Validate UniProt integration and confidence scoring. Test edge cases with equal-length transcripts.",
        "priority": "medium",
        "dependencies": [
          18
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Build Data Validation and Cross-Reference System",
        "description": "Implement multi-database validation system using UniProt and Ensembl for sequence verification and quality scoring",
        "details": "Create DataValidator class that cross-references sequences against UniProt and Ensembl REST APIs. Implement sequence completeness validation (start/stop codons). Check for deprecated or withdrawn entries. Calculate confidence scores based on source database agreement. Identify potential issues: partial sequences, multiple variants, conflicting annotations. Add validation flags and warning system for data quality issues.",
        "testStrategy": "Test validation against known good and problematic sequences. Verify cross-reference accuracy with UniProt/Ensembl. Test confidence scoring algorithm. Validate warning flag generation for edge cases.",
        "priority": "medium",
        "dependencies": [
          19
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Create Input/Output Processing System",
        "description": "Build flexible input parser for CSV/Excel/text formats and Excel-compatible output generator with structured columns",
        "details": "Create InputParser class supporting CSV, Excel (.xlsx), and plain text formats. Handle various encodings and delimiters. Create OutputFormatter class generating tab-delimited output with specific column structure: Input Name | Official Symbol | Gene ID | RefSeq Accession | GenBank URL | CDS Length | CDS Sequence | Selection Method | Confidence Score | Warnings. Ensure UTF-8 with BOM encoding for Excel compatibility. Add audit trail generation with timestamps, database versions, and selection justifications.",
        "testStrategy": "Test input parsing with various file formats and encodings. Verify Excel output compatibility by importing into Excel. Validate column structure and UTF-8 BOM handling. Test large file processing.",
        "priority": "medium",
        "dependencies": [
          20
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "Implement Command Line Interface",
        "description": "Build user-friendly CLI with Click framework supporting progress bars, verbose modes, and configuration options",
        "details": "Create CLI using Click framework with main command: `genbank-tool genes.txt output.tsv`. Implement progress bars for batch operations using tqdm or Click's progress bar. Add verbose mode for debugging output and quiet mode for automation. Include configuration options: database preferences, selection strategy, retry attempts, cache settings. Add comprehensive help documentation with usage examples. Implement error handling with user-friendly error messages.",
        "testStrategy": "Test CLI commands with various argument combinations. Verify progress bar functionality during long operations. Test verbose and quiet modes. Validate help documentation completeness and error message clarity.",
        "priority": "medium",
        "dependencies": [
          21
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Build Caching and Performance Optimization System",
        "description": "Implement local caching mechanism with expiration tracking and parallel processing for batch operations",
        "details": "Create CacheManager class with local file-based caching for resolved gene names and retrieved sequences. Implement cache expiration based on configurable timeouts. Add parallel processing using ThreadPoolExecutor for batch retrieval operations while respecting API rate limits. Optimize memory usage to stay under 500MB limit. Implement cache cleanup and maintenance functions. Add cache statistics and hit rate monitoring.",
        "testStrategy": "Test cache hit/miss scenarios and expiration logic. Verify parallel processing performance with rate limiting. Monitor memory usage during large batch operations. Test cache cleanup functionality.",
        "priority": "low",
        "dependencies": [
          22
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Implement Comprehensive Error Handling and Logging",
        "description": "Build robust error handling system with detailed logging, network failure recovery, and user-friendly error reporting",
        "details": "Create ErrorHandler class with specific handling for network timeouts, API rate limits, invalid gene names, and partial failures. Implement comprehensive logging system with different log levels (DEBUG, INFO, WARNING, ERROR). Add detailed error reporting for users with actionable suggestions. Create recovery mechanisms for network interruptions and API failures. Ensure no data loss during partial batch failures with checkpoint/resume capability.",
        "testStrategy": "Test error handling with simulated network failures, API errors, and invalid inputs. Verify logging output at different levels. Test recovery mechanisms and partial failure scenarios. Validate user error messages are actionable.",
        "priority": "medium",
        "dependencies": [
          23
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "Package Application and Create Distribution",
        "description": "Create single-file executable distribution using PyInstaller and comprehensive documentation package",
        "details": "Configure PyInstaller to create single-file executables for Windows, Mac, and Linux platforms. Ensure all dependencies are properly bundled and no external requirements exist beyond Python. Create comprehensive documentation including installation guide, usage examples, troubleshooting section, and API reference. Develop example input files and sample workflows. Add README with quick start instructions. Set up automated testing pipeline for distribution packages.",
        "testStrategy": "Test executable distribution on different operating systems. Verify standalone operation without Python installation. Test documentation completeness and example file functionality. Validate installation and usage instructions.",
        "priority": "low",
        "dependencies": [
          24
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 26,
        "title": "Enhance Gene Resolver with UniProt API Integration",
        "description": "Extend existing gene resolution system to include UniProt API as primary/fallback source for improved gene name resolution, implementing multi-source strategy with confidence scoring.",
        "details": "Enhance the existing GeneResolver class to integrate UniProt REST API alongside NCBI Gene database. Implement multi-source resolution strategy: 1) Query NCBI Gene first as primary source, 2) If confidence score is low (<0.7) or no results found, query UniProt API using gene name/symbol, 3) Extract NCBI Gene ID from UniProt cross-references when available, 4) Merge results with weighted confidence scoring favoring NCBI direct hits. Add UniProt-specific methods: fetchFromUniProt(), parseUniProtResponse(), extractNCBIFromCrossRefs(). Implement fallback chain with configurable confidence thresholds. Add UniProt rate limiting (10 requests/second) and caching. Handle UniProt-specific edge cases: multiple isoforms, obsolete entries, species disambiguation. Update confidence scoring algorithm to incorporate source reliability and cross-reference validation. Maintain backward compatibility with existing GeneResolver interface.",
        "testStrategy": "Test multi-source resolution with problematic genes like PAX6 that fail in NCBI but exist in UniProt. Verify fallback mechanism triggers correctly for low-confidence NCBI results. Test NCBI Gene ID extraction from UniProt cross-references. Validate confidence scoring with mixed-source results. Test rate limiting compliance for both APIs. Verify caching works across both data sources. Test edge cases: genes only in UniProt, conflicting information between sources, network failures during fallback. Ensure existing functionality remains intact through regression testing.",
        "status": "done",
        "dependencies": [
          17
        ],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-22T19:25:37.814Z",
      "updated": "2025-07-22T20:25:39.451Z",
      "description": "Tasks for master context"
    }
  }
}